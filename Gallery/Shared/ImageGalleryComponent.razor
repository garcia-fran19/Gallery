@page "/"
@inject IDialogService DialogService
@using MudBlazor


<MudContainer>
    <div style="margin-bottom: 20px;">
    <MudButton OnClick="ShowFavorites" Variant="Variant.Filled" Color="Color.Secondary">Favoritos</MudButton>
    </div>
    @if (showingFavorites && FavoriteImages.Count > 0)
    {
        <MudGrid>
            @foreach (var favoriteImage in FavoriteImages)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard>
                        <MudCardMedia Image="@favoriteImage" />
                        <MudCardActions>
                            <MudButton OnClick="() => OpenLightbox(favoriteImage)">Ver</MudButton>
                            <MudIconButton Icon="@GetIcon(favoriteImage)"
                                           Color="@GetIconColor(favoriteImage)"
                                           OnClick="() => ToggleFavorite(favoriteImage)" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else if (showingFavorites && FavoriteImages.Count == 0)
    {
        <MudText>No hay imágenes favoritas.</MudText>
    }
    else
    {
<MudGrid>
    @foreach (var image in Images)
    {
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard>
                <MudCardMedia Image="@(image)" />
                        <MudCardActions style="display: flex; justify-content: space-between; align-items: center;">
                            <MudButton OnClick="() => OpenLightbox(image)" style="margin-left: 5%;">Ver</MudButton>
                     <MudIconButton Icon="@GetIcon(image)"
                                   Color="@GetIconColor(image)"
                                           style="margin-right: 5%;"
                                   OnClick="() => ToggleFavorite(image)" />
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>}
</MudContainer>

@code {
    private List<string> Images = new List<string>
    {
        "images/img1.webp",
        "images/img2.webp"

        // Agrega más rutas de imágenes aquí
    };


    private bool showingFavorites = false;
    private void ShowFavorites()
    {
        showingFavorites = !showingFavorites;
    }

    private string GetIcon(string imageUrl)
    {
        return IsFavorite(imageUrl) ? Icons.Material.Filled.Favorite : Icons.Material.Filled.FavoriteBorder;
    }

    private MudBlazor.Color GetIconColor(string imageUrl)
    {

        return IsFavorite(imageUrl) ? MudBlazor.Color.Error : MudBlazor.Color.Default;
    }

    private async Task OpenLightbox(string image)
    {
        var parameters = new DialogParameters {   { "Images", Images },
        { "SelectedImage", image } };
        await DialogService.ShowAsync<LightboxDialog>("Image Viewer", parameters);
    }


    //implementacion de funcionalidad marca favorita
    private HashSet<string> FavoriteImages = new HashSet<string>();

    private void ToggleFavorite(string imageUrl)
    {
        if (IsFavorite(imageUrl))
        {
            FavoriteImages.Remove(imageUrl);
        }
        else
        {
            FavoriteImages.Add(imageUrl);
        }
    }

    private bool IsFavorite(string imageUrl)
    {
        return FavoriteImages.Contains(imageUrl);
    }
}
